/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class de_jpaw_offHeap_LongToByteArrayOffHeapMap */

#ifndef _Included_de_jpaw_offHeap_LongToByteArrayOffHeapMap
#define _Included_de_jpaw_offHeap_LongToByteArrayOffHeapMap
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natOpen
 * Signature: (II)J
 */
JNIEXPORT jlong JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natOpen
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natClose
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natClose
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natClear
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natClear
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natDelete
 * Signature: (JJJ)Z
 */
JNIEXPORT jboolean JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natDelete
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natGetSize
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natGetSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natLength
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natLength
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natCompressedLength
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natCompressedLength
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natGet
 * Signature: (JJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natGet
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natRemove
 * Signature: (JJJ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natRemove
  (JNIEnv *, jobject, jlong, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natSet
 * Signature: (JJJ[BIIZ)Z
 */
JNIEXPORT jboolean JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natSet
  (JNIEnv *, jobject, jlong, jlong, jlong, jbyteArray, jint, jint, jboolean);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natPut
 * Signature: (JJJ[BIIZ)[B
 */
JNIEXPORT jbyteArray JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natPut
  (JNIEnv *, jobject, jlong, jlong, jlong, jbyteArray, jint, jint, jboolean);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natGetHistogram
 * Signature: (J[I)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natGetHistogram
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natGetIntoPreallocated
 * Signature: (JJ[BI)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natGetIntoPreallocated
  (JNIEnv *, jobject, jlong, jlong, jbyteArray, jint);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natGetRegion
 * Signature: (JJII)[B
 */
JNIEXPORT jbyteArray JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natGetRegion
  (JNIEnv *, jobject, jlong, jlong, jint, jint);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMap
 * Method:    natGetField
 * Signature: (JJIBB)[B
 */
JNIEXPORT jbyteArray JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMap_natGetField
  (JNIEnv *, jobject, jlong, jlong, jint, jbyte, jbyte);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator */

#ifndef _Included_de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator
#define _Included_de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator
 * Method:    natInit
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator_natInit
  (JNIEnv *, jclass);

/*
 * Class:     de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator
 * Method:    natIterate
 * Signature: (JJI)J
 */
JNIEXPORT jlong JNICALL Java_de_jpaw_offHeap_LongToByteArrayOffHeapMapEntryIterator_natIterate
  (JNIEnv *, jobject, jlong, jlong, jint);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class de_jpaw_offHeap_OffHeapTransaction */

#ifndef _Included_de_jpaw_offHeap_OffHeapTransaction
#define _Included_de_jpaw_offHeap_OffHeapTransaction
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natCreateTransaction
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natCreateTransaction
  (JNIEnv *, jobject, jint);

/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natSetMode
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natSetMode
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natCommit
 * Signature: (JJ)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natCommit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natRollback
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natRollback
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natSetSafepoint
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natSetSafepoint
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natCloseTransaction
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natCloseTransaction
  (JNIEnv *, jobject, jlong);

/*
 * Class:     de_jpaw_offHeap_OffHeapTransaction
 * Method:    natDebugRedoLog
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_de_jpaw_offHeap_OffHeapTransaction_natDebugRedoLog
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
